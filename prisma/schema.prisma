// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  role          UserRole  @default(BUYER)
  phone         String?
  image         String?
  isActive      Boolean   @default(true)
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLoginAt   DateTime? @map("last_login_at")
  orders        Order[]
  sessions      Session[]
  accounts      Account[]
  buyerProfile  BuyerProfile?
  farmerProfile FarmerProfile?
  
  @@map("users")
}

model Account {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  type              String
  provider          String
  providerAccountId String    @map("provider_account_id")
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token         String?   @db.Text
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model BuyerProfile {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  address     String?
  city        String?
  country     String?  @default("Rwanda")
  postalCode  String?  @map("postal_code")
  preferences Json?    @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("buyer_profiles")
}

model FarmerProfile {
  id            String   @id @default(cuid())
  userId        String   @unique @map("user_id")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  farmName      String   @map("farm_name")
  location      String?
  district      String?
  province      String?
  country       String?  @default("Rwanda")
  bio           String?  @db.Text
  isVerified    Boolean  @default(false) @map("is_verified")
  verificationDocument String? @map("verification_document")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  @@map("farmer_profiles")
}

model Order {
  id              String   @id @default(cuid())
  buyerId         String   @map("buyer_id")
  sellerId        String   @map("seller_id")
  totalAmount     Float    @map("total_amount")
  currency        String   @default("RWF")
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  paymentMethod   String?  @map("payment_method")
  deliveryAddress Json     @map("delivery_address")
  deliveryMethod  DeliveryMethod @default(DELIVERY) @map("delivery_method")
  estimatedDelivery DateTime? @map("estimated_delivery")
  actualDelivery  DateTime? @map("actual_delivery")
  notes           String?  @db.Text
  buyer           User     @relation("BuyerOrders", fields: [buyerId], references: [id], onDelete: Cascade)
  seller          User     @relation("SellerOrders", fields: [sellerId], references: [id], onDelete: Cascade)
  items           OrderItem[]
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String   @map("order_id")
  productId   String   @map("product_id")
  productName String   @map("product_name")
  quantity    Float
  unit        String
  pricePerUnit Float   @map("price_per_unit")
  totalPrice  Float    @map("total_price")
  imageUrl    String?  @map("image_url")
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("order_items")
}

enum UserRole {
  ADMIN
  FARMER
  BUYER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum DeliveryMethod {
  DELIVERY
  PICKUP
}
